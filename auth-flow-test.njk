---
layout: layout.njk
title: Auth Flow Test
---

<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-8">Authentication Flow Test</h1>
  
  <div class="flex flex-wrap -mx-4">
    <!-- Test Panel -->
    <div class="w-full md:w-1/2 px-4 mb-8">
      <div class="bg-white p-6 rounded-lg shadow-md dark:bg-gray-800">
        <h2 class="text-xl font-semibold mb-4">Test Functions</h2>
        
        <div class="space-y-4">
          <!-- Login Test -->
          <div class="border-b pb-4">
            <h3 class="text-lg font-medium mb-2">Login Test</h3>
            <div class="flex space-x-2">
              <button id="btn-test-login" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">
                Test Login
              </button>
              <button id="btn-test-login-remember" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">
                Login with "Remember Me"
              </button>
            </div>
            <div class="mt-2">
              <label class="block text-sm font-medium">Member Type:</label>
              <select id="member-type-select" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm">
                <option value="free">Free</option>
                <option value="basic">Basic</option>
                <option value="premium">Premium</option>
              </select>
            </div>
          </div>
          
          <!-- Session Management -->
          <div class="border-b pb-4">
            <h3 class="text-lg font-medium mb-2">Session Management</h3>
            <div class="flex space-x-2">
              <button id="btn-expire-session" class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition">
                Expire Session
              </button>
              <button id="btn-test-is-auth" class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition">
                Test isAuthenticated()
              </button>
              <button id="btn-test-expiry" class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition">
                Test isSessionExpired()
              </button>
            </div>
          </div>
          
          <!-- UI Update Test -->
          <div class="border-b pb-4">
            <h3 class="text-lg font-medium mb-2">UI Update</h3>
            <div class="flex space-x-2">
              <button id="btn-update-ui" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
                Force updateUI()
              </button>
              <button id="btn-refresh-dom" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
                Refresh DOM Elements
              </button>
            </div>
          </div>
          
          <!-- Logout Test -->
          <div class="border-b pb-4">
            <h3 class="text-lg font-medium mb-2">Logout</h3>
            <button id="btn-test-logout" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition">
              Test Logout
            </button>
          </div>
          
          <!-- Protected Page Test -->
          <div>
            <h3 class="text-lg font-medium mb-2">Protected Pages</h3>
            <div class="flex space-x-2">
              <button id="btn-add-meta" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition">
                Add requires-auth meta tag
              </button>
              <button id="btn-check-protected" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition">
                Run checkProtectedPage()
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Status Panel -->
    <div class="w-full md:w-1/2 px-4">
      <div class="bg-white p-6 rounded-lg shadow-md dark:bg-gray-800">
        <h2 class="text-xl font-semibold mb-4">Status & Debug</h2>
        
        <div class="mb-4">
          <h3 class="text-lg font-medium mb-2">Current Auth Status</h3>
          <div class="p-3 bg-gray-100 rounded dark:bg-gray-700">
            <pre id="auth-status" class="whitespace-pre-wrap text-sm">Loading...</pre>
          </div>
        </div>
        
        <div class="mb-4">
          <h3 class="text-lg font-medium mb-2">Local Storage Contents</h3>
          <div class="p-3 bg-gray-100 rounded dark:bg-gray-700">
            <pre id="localstorage-display" class="whitespace-pre-wrap text-sm">Loading...</pre>
          </div>
        </div>
        
        <div>
          <h3 class="text-lg font-medium mb-2">Log</h3>
          <div class="p-3 bg-gray-100 rounded dark:bg-gray-700 h-64 overflow-y-auto">
            <div id="log-container" class="whitespace-pre-wrap text-sm font-mono"></div>
          </div>
          <button id="btn-clear-log" class="mt-2 px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700 transition text-sm">
            Clear Log
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- DOM Elements for Auth Manager -->
  <div class="hidden mt-8">
    <h2 class="text-xl font-semibold mb-4">Mock DOM Elements (Hidden)</h2>
    <div class="p-4 border rounded">
      <!-- Login Link -->
      <a id="login-join-link" href="/login/" class="block p-2 border-b">Login/Join Link</a>
      
      <!-- User Menu Container -->
      <div id="user-menu-container" class="hidden">
        <!-- User Menu Button -->
        <button id="user-menu-button" type="button" class="p-2" aria-expanded="false" aria-haspopup="true">
          <span id="user-name-display">User Name</span>
          <span id="member-type-badge" class="hidden ml-1 px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">Basic</span>
        </button>
        
        <!-- User Dropdown -->
        <div id="user-dropdown" class="hidden mt-2 p-2 border rounded">
          <a href="/portal_dashboard/" class="block p-1">Dashboard</a>
          <a href="/profile/" class="block p-1">Profile</a>
          <button id="desktop-settings-button" class="block p-1 w-full text-left" aria-expanded="false">Settings</button>
          <div id="desktop-settings-panel" class="hidden mt-1 p-2 border rounded">
            Settings panel content
          </div>
          <a href="#" class="block p-1 text-red-600 logout-button">Log Out</a>
        </div>
      </div>
      
      <!-- Mobile Menu Elements -->
      <div class="mt-4">
        <a id="mobile-login-join-link" href="/login/" class="block p-2 border-b">Mobile Login/Join Link</a>
        <div id="mobile-menu">
          <hr class="my-2">
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Wait for auth manager to initialize
  document.addEventListener('DOMContentLoaded', () => {
    // Set up a simple logging function
    const log = (message) => {
      const logContainer = document.getElementById('log-container');
      const logEntry = document.createElement('div');
      const timestamp = new Date().toLocaleTimeString();
      logEntry.textContent = `[${timestamp}] ${message}`;
      logContainer.appendChild(logEntry);
      logContainer.scrollTop = logContainer.scrollHeight;
    };
    
    // Override console.log to capture AuthManager logs
    const originalConsoleLog = console.log;
    console.log = function() {
      originalConsoleLog.apply(console, arguments);
      
      // Only log AuthManager messages
      const args = Array.from(arguments);
      const message = args.join(' ');
      if (message.includes('[AuthManager]')) {
        log(message);
      }
    };
    
    // Update status displays
    function updateDisplays() {
      // Update auth status
      const authStatusEl = document.getElementById('auth-status');
      if (window.authService) {
        const isAuth = window.authService.isAuthenticated();
        const user = window.authService.getCurrentUser();
        authStatusEl.textContent = `Authenticated: ${isAuth}\nUser: ${user ? JSON.stringify(user, null, 2) : 'null'}`;
      } else {
        authStatusEl.textContent = 'AuthService not loaded';
      }
      
      // Update localStorage display
      const lsDisplay = document.getElementById('localstorage-display');
      const authItems = {};
      
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('valuealign_') || key === 'auth_redirect_after_login') {
          try {
            // Try to parse JSON values
            const value = localStorage.getItem(key);
            try {
              authItems[key] = JSON.parse(value);
            } catch (e) {
              authItems[key] = value;
            }
          } catch (e) {
            authItems[key] = '(error reading value)';
          }
        }
      }
      
      lsDisplay.textContent = JSON.stringify(authItems, null, 2);
    }
    
    // Set up event listeners for test buttons
    document.getElementById('btn-test-login').addEventListener('click', () => {
      const memberType = document.getElementById('member-type-select').value;
      
      log('Testing login with member type: ' + memberType);
      
      const userData = {
        name: 'Test User',
        email: 'test@example.com',
        memberType: memberType
      };
      
      window.authService.login(userData, false);
      updateDisplays();
    });
    
    document.getElementById('btn-test-login-remember').addEventListener('click', () => {
      const memberType = document.getElementById('member-type-select').value;
      
      log('Testing login with "Remember Me" and member type: ' + memberType);
      
      const userData = {
        name: 'Test User',
        email: 'test@example.com',
        memberType: memberType
      };
      
      window.authService.login(userData, true);
      updateDisplays();
    });
    
    document.getElementById('btn-expire-session').addEventListener('click', () => {
      log('Manually expiring session');
      const pastTime = new Date().getTime() - 3600000; // 1 hour ago
      localStorage.setItem('valuealign_session_expiry', pastTime.toString());
      updateDisplays();
    });
    
    document.getElementById('btn-test-is-auth').addEventListener('click', () => {
      log('Testing isAuthenticated()');
      const isAuth = window.authService.isAuthenticated();
      log(`isAuthenticated() returned: ${isAuth}`);
      updateDisplays();
    });
    
    document.getElementById('btn-test-expiry').addEventListener('click', () => {
      log('Testing isSessionExpired()');
      const isExpired = window.authService.isSessionExpired();
      log(`isSessionExpired() returned: ${isExpired}`);
      updateDisplays();
    });
    
    document.getElementById('btn-update-ui').addEventListener('click', () => {
      log('Manually calling updateUI()');
      window.authService.updateUI();
      log('Called updateUI()');
      updateDisplays();
    });
    
    document.getElementById('btn-refresh-dom').addEventListener('click', () => {
      log('Refreshing DOM element references');
      window.authService.setupDOMListeners();
      updateDisplays();
    });
    
    document.getElementById('btn-test-logout').addEventListener('click', () => {
      log('Testing logout()');
      window.authService.logout();
      // No need to update displays as logout will redirect
    });
    
    document.getElementById('btn-add-meta').addEventListener('click', () => {
      log('Adding requires-auth meta tag to page');
      let metaTag = document.querySelector('meta[name="requires-auth"]');
      
      if (!metaTag) {
        metaTag = document.createElement('meta');
        metaTag.setAttribute('name', 'requires-auth');
        document.head.appendChild(metaTag);
      }
      
      metaTag.setAttribute('content', 'true');
      log('Meta tag added. Content: ' + metaTag.getAttribute('content'));
    });
    
    document.getElementById('btn-check-protected').addEventListener('click', () => {
      log('Running checkProtectedPage()');
      window.authService.checkProtectedPage();
      // May redirect if not authenticated and page is protected
    });
    
    document.getElementById('btn-clear-log').addEventListener('click', () => {
      document.getElementById('log-container').innerHTML = '';
    });
    
    // Watch for authService initialization
    if (window.authService) {
      log('AuthService already initialized');
    } else {
      // Add a short delay to check for authService
      setTimeout(() => {
        if (window.authService) {
          log('AuthService initialized after delay');
        } else {
          log('AuthService not initialized within timeout');
        }
      }, 500);
    }
    
    // Initial update of displays
    updateDisplays();
    
    // Set up periodic updates
    setInterval(updateDisplays, 2000);
  });
</script>
